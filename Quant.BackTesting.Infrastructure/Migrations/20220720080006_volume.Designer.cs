// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quant.BackTesting.Infrastructure.Data;

namespace Quant.BackTesting.Infrastructure.Migrations
{
    [DbContext(typeof(HistoricalDataContext))]
    [Migration("20220720080006_volume")]
    partial class volume
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Quant.BackTesting.Infrastructure.Data.Entities.SymbolData", b =>
                {
                    b.Property<int>("SymbolDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Close")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("High")
                        .HasColumnType("float");

                    b.Property<double>("Low")
                        .HasColumnType("float");

                    b.Property<double>("Open")
                        .HasColumnType("float");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("SymbolDataId");

                    b.HasIndex("Symbol", "DateTime")
                        .IsUnique()
                        .HasFilter("[Symbol] IS NOT NULL");

                    b.ToTable("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
